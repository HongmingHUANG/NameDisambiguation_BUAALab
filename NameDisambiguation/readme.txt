- cluster
cluster文件夹，包含学科树聚类代码。
1. 1st_cluster_cmp包含多个一级聚类方法，采用的是online k-means(sequential km),可以把其他的注释掉。a和flat_a 比较好的取值是0.04和0.0004。1st_cluster_cmp运行后，在cmp_cluster/skm/生成结果。0-13个文件包含0-13个一级学科中的词。
2. remote_2nd_cluster读取0-13个一级学科的词（放在一个文件夹里），依次进行二次聚类。每个二级学科的词被放在一个文本文件里，同一一级学科的二级学科词被放在同一个文件夹中。
3.  gen_doc读取聚好类的二级学科，生成树状结构，输出距离中心最近的n个词。（一级和二级学科聚类后输出的词均按照距离中心的距离升序输出）
4. centroids_tree_remote 读取一级分类和二级分类，保存在np array，为prototype匹配论文作准备。


- prototype
1. match文件 读取数据，抽取人物和论文的关键词和权重，匹配，最后生成词云放在cloudtags文件夹
2. loaddata部分，抽取人物和论文信息，第一次运行抽取出文本信息，按行输出例如text.txt, kw.txt。然后对这些文件用java的ansj分词，保存为text_seg.txt等，然后再次运行就可以了。
3. tagpaper是给论文打学科标签。过程：一级学科处理完后，接着对同一篇论文做二级学科分类。当得分最高的两个二级分类得分之差>a,并且较高者>b时，则归类该论文为二级学科，否则归类为一级学科。a,b的值与每个词被赋予的权重有关，需要与词的权重那几个超参数（在extract keyword weight里）一起调整。
4. extract keyword weight 对于词是否属于领域词，以及是否属于论文的关键词字段，对其赋予不同的权重
5. tagpeople 对于在学科树上属于同一学科的论文，匹配人物信息，看能否匹配上；不能被匹配人物信息的，（1）在一级学科，假设为新的实体（2）在二级学科，假设可以被合并到其他类。合并策略有待完善。
